@model CapaEntidad.Reparacion

@{
    ViewBag.Title = "Registrar Reparación";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link href="~/Content/css/styles.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert -->
    <script type="text/javascript">
    $(document).ready(function () {
        // Manejar la búsqueda de clientes
        $('#placa').on('change', function () {
            var placa = $(this).val();
            if (placa) {
                $.getJSON('@Url.Action("BuscarIdClientePorPlaca", "Inicio")', { placa: placa }, function (data) {
                    $('#IdCliente').val(data.idCliente || "Cliente no encontrado");
                });
            }
        });

        $('#btnBuscar').on('click', function () {
            var placa = $('#placa').val();
            if (placa) {
                fetch('@Url.Action("BuscarIdClientePorPlaca", "Inicio")?placa=' + placa, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Red error: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    $('#IdCliente').val(data.idCliente || "Cliente no encontrado");
                })
                .catch(error => {
                    console.error('Error al buscar el cliente:', error);
                    $('#IdCliente').val("Error en la búsqueda");
                });
            }
        });

        // Mostrar SweetAlert si hay registro exitoso
        var registroExitoso = '@TempData["RegistroExitoso"]';
        if (registroExitoso === 'True') {
            Swal.fire({
                title: '¡Registro Exitoso!',
                text: 'La reparación ha sido registrada correctamente.',
                icon: 'success',
                confirmButtonText: 'Aceptar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Opcionalmente, redirige a otra vista después de aceptar el mensaje
                    window.location.href = '@Url.Action("GestionarReparaciones", "Inicio")';
                }
            });
        }
    });
    </script>
</head>
<body>
    <section class="wrapper">
        <div class="container">
            @using (Html.BeginForm("RegistrarR", "Inicio", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="content-box">
                    <div class="form-group">
                        <h1>@ViewBag.Title</h1>
                        <label for="Placa">Placa</label>
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.placa, new { @class = "form-control", required = "required", id = "placa" })
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-secondary" id="btnBuscar">Buscar</button>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.placa, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="IdCliente">ID del Cliente</label>
                        @Html.TextBoxFor(model => model.IdCliente, new { @class = "form-control", @type = "number", required = "required", id = "IdCliente", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.IdCliente, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="NumeroDocumento">Mecánico</label>
                        @Html.DropDownList("NumeroDocumento", (SelectList)ViewBag.Mecanicos, "Seleccione un mecánico", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.NumeroDocumento, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Descripcion)
                        @Html.TextAreaFor(model => model.Descripcion, new { @class = "form-control", rows = 4, required = "required" })
                        @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="FechaIngreso">Fecha de Ingreso</label>
                        @Html.TextBoxFor(model => model.FechaIngreso, new { @class = "form-control", @type = "date", required = "required" })
                        @Html.ValidationMessageFor(model => model.FechaIngreso, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="FechaEntregaPrevista">Fecha de Entrega Prevista</label>
                        @Html.TextBoxFor(model => model.FechaEntregaPrevista, new { @class = "form-control", @type = "date", required = "required" })
                        @Html.ValidationMessageFor(model => model.FechaEntregaPrevista, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Estado)
                        @Html.DropDownListFor(
                            model => model.Estado,
                            new SelectList(
                                new List<SelectListItem>
                                {
                                    new SelectListItem { Value = "", Text = "Seleccione una opción"},
                                    new SelectListItem { Value = "Pendiente", Text = "Pendiente" },
                                    new SelectListItem { Value = "En Progreso", Text = "En Progreso" },
                                }, "Value", "Text"),
                            new { @class = "form-control", required = "required" }
                        )
                        @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
                    </div>

                    <button type="submit" class="btn btn-primary">Registrar</button>
                </div>
            }
        </div>
    </section>
</body>
</html>

<style>
    .wrapper {
        padding: 20px;
        background-color: #f5f8fa;
        min-height: 100vh;
    }

        .wrapper h1 {
            font-size: 2rem;
            font-weight: bold;
            color: #31bc71;
            margin-bottom: 20px;
        }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        border-radius: 0;
        border: 1px solid #ced4da;
        padding: 10px;
        font-size: 1rem;
        width: 100%;
    }

    .btn {
        margin: 0 5px;
        padding: 10px 20px;
    }

    .btn-primary {
        background-color: #31bc71;
        border: none;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #28a745;
        }

    /* Estilo del content-box */
    .content-box {
        background-color: #fff;
        border: 1px solid #ced4da;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }
</style>
